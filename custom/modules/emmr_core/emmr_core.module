<?php

/**
 * @file
 * Contains emmr_core.module.
 */

use Drupal\block\Entity\Block;
use Drupal\node\Entity\Node;
use Drupal\taxonomy\Entity\Term;

/**
 * Implements hook_preprocess_hook().
 */
function emmr_core_preprocess_emmr_intro(&$variables) {
  $block = Block::load('exposedformemmr_browse_recipespage_2');
  $variables['search_block_output'] = \Drupal::entityTypeManager()
    ->getViewBuilder('block')
    ->view($block);
}

/**
 * Implements hook_theme().
 */
function emmr_core_theme($existing, $type, $theme, $path) {
  return [
    'emmr_intro' => [
      'variables' => [],
    ],
    'node__emmr_recipe__full' => [
      'arguments' => [
        'view' => NULL,
        'field' => NULL,
        'row' => NULL,
        'output' => NULL,
      ],
      'template' => 'node--emmr-recipe--full',
      'path' => drupal_get_path('module', 'emmr_core') . '/templates',
      'base hook' => 'node__emmr_recipe__full',
    ],
    'node__emmr_recipe__pdf' => [
      'arguments' => [
        'view' => NULL,
        'field' => NULL,
        'row' => NULL,
        'output' => NULL,
      ],
      'template' => 'node--emmr-recipe--pdf',
      'path' => drupal_get_path('module', 'emmr_core') . '/templates',
      'base hook' => 'node__emmr_recipe__pdf',
    ],
    'node__emmr_source__full' => [
      'arguments' => [
        'view' => NULL,
        'field' => NULL,
        'row' => NULL,
        'output' => NULL,
      ],
      'template' => 'node--emmr-source--full',
      'path' => drupal_get_path('module', 'emmr_core') . '/templates',
      'base hook' => 'node__emmr_source__full',
    ],
  ];
}

/**
 * Implements hook_preprocess_node().
 */
function emmr_core_preprocess_node(&$variables) {
  $node = $variables['node'];

  if ($node->bundle() == 'emmr_recipe') {
    // Process annotations.
    // Recover transcription.
    $trans = !empty($node->get('field_recipe_transcription')->getValue()[0]) ?
      $node->get('field_recipe_transcription')->getValue()[0]['value'] : "";

    // Update annotations.
    $annos = !empty($node->get('field_annotations')->getValue()) ?
      $node->get('field_annotations')->getValue() : [];

    if ($annos) {
      $annos_num = count($variables['content']['field_annotations']['#items']);
      $annos_val = [];
      $i = 0;

      while ($i < $annos_num) {
        $annos_val[] = $variables['content']['field_annotations'][$i]['#paragraph']->get('field_annotation_text')->getValue()[0]['value'];
        $i++;
      }

      foreach ($annos_val as $val) {
        $val = preg_replace('/(^[[:punct:]]|[[:punct:]]$)/', '', $val);
        $pattern = '/(\b\Q' . $val . '\E\b)/mi';
        $replacement = '<span class="emmr-anno">$1</span>';
        $trans = preg_replace($pattern, $replacement, $trans);
      }
      $variables['content']['field_recipe_transcription'][0]['#text'] = $trans;
    }

    // Add source data.
    if (!empty($node->get('field_recipe_source')->getValue()[0]['target_id'])) {
      $sid = intval($node->get('field_recipe_source')->getValue()[0]['target_id']);

      if (!empty(Node::load($sid))) {
        $source = Node::load($sid);

        $iid = !empty($source->get('field_institution')->getValue()[0]['target_id']) ?
          $source->get('field_institution')->getValue()[0]['target_id'] : NULL;
        $institution = !empty($iid) ? Term::load($iid)->getName() : "";

        $origin = !empty($source->get('field_source_origin')->getValue()[0]) ?
          $source->get('field_source_origin')->getValue()[0]['value'] : "";
        $sublocation = !empty($source->get('field_sublocation')->getValue()) ?
          $source->get('field_sublocation')->getValue()[0]['value'] : "";
        $reference = !empty($source->get('field_reference')->getValue()) ?
          $source->get('field_reference')->getValue()[0]['value'] : "";

        $variables['source']['institution'] = $institution;
        $variables['source']['origin'] = $origin;
        $variables['source']['sublocation'] = $sublocation;
        $variables['source']['reference'] = $reference;
      }
    }
  }
}

/**
 * Implements hook_ENTITY_TYPE_presave().
 */
function emmr_core_node_presave($node) {
  // Clear imprecise date fields if date not imprecise.
  if ($node->bundle() == "emmr_recipe") {

    if (empty($node->get('field_imprecise_date')->getValue()[0]['value'])) {
      $node->get('field_recipe_date_text')->setValue("");
      $node->get('field_recipe_date_to')->setValue("");
    }

    if (empty($node->get('field_annotations')->getValue()[0]['subform']['field_annotation_text'][0]['value'])) {
      $node->get('field_annotations')->setValue(NULL);
    }

    if (empty($node->get('field_contributors')->getValue()[0]['subform']['field_contributor_name'][0]['value'])) {
      $node->get('field_contributors')->setValue(NULL);
    }

    // Update text search ingredients list.
    $ing_list = $node->get('field_ingredients')->getValue();
    $ingredients = "";

    foreach ($ing_list as $ing) {
      $ingredients .= $ing['value'] . " ";
    }

    // Update text search symptoms list.
    $sym_list = $node->get('field_symptoms')->getValue();
    $symptoms = "";

    foreach ($sym_list as $sym) {
      $symptoms .= $sym['value'] . " ";
    }

    $node->get('field_symptoms_search')->setValue($symptoms);
  }
}

/**
 * Implements hook_FORM_ID_alter().
 */
function emmr_core_form_alter(&$form, &$form_state, $form_id) {

  if ($form_id == "node_emmr_recipe_form" ||
  $form_id == "node_emmr_recipe_edit_form") {

    $form['#validate'][] = 'validate_date_text';

    $form['field_recipe_date_to']['#states']['invisible'][':input[name="field_imprecise_date[value]"]']
      = ['checked' => FALSE];
    $form['field_recipe_date_text']['#states']['invisible'][':input[name="field_imprecise_date[value]"]']
      = ['checked' => FALSE];
  }
}

/**
 * Callback validation function for recipe-edit.
 */
function validate_date_text(&$form, $form_state) {
  $imp_date = $form_state->getValue('field_imprecise_date')['value'];
  $date_txt = $form_state->getValue('field_recipe_date_text')[0]['value'];

  if ($imp_date && $date_txt == "") {
    $form_state->setErrorByName('field_recipe_date_text',
      t('Imprecise dates must contain a date description.'));
  }
}

/**
 * Implements hook_views_query_alter().
 */
function emmr_core_views_query_alter($view, $query) {
  $view = $query->view;
  $view_id = $view->id();
  $view_disp = $view->current_display;

  if ($view_id == "emmr_browse_recipes" && $view_disp == "page_1") {
    $date_where = $query->where['2']['conditions'];
    $date_min = date('c',
      strtotime($query->view->exposed_data['field_recipe_date_value']['min']));

    if (count($date_where)) {
      $where2 = str_replace('date', 'date_to',
        $date_where[0]);
      $query->where['2']['conditions'][] = $where2;

      $where3 = $date_where[0];
      $where3['field'] =
        "DATE_FORMAT('" . $date_min . "', '%Y-%m-%d')
        BETWEEN
        DATE_FORMAT(node__field_recipe_date.field_recipe_date_value, '%Y-%m-%d')
        AND DATE_FORMAT(node__field_recipe_date_to.field_recipe_date_to_value, '%Y-%m-%d')";

      $query->where['2']['conditions'][] = $where3;
    }
  }
}
