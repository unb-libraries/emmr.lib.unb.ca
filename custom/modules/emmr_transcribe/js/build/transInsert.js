!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?exports.CKEditor5=t():(e.CKEditor5=e.CKEditor5||{},e.CKEditor5.transInsert=t())}(self,(()=>(()=>{var e={"ckeditor5/src/core.js":(e,t,n)=>{e.exports=n("dll-reference CKEditor5.dll")("./src/core.js")},"ckeditor5/src/ui.js":(e,t,n)=>{e.exports=n("dll-reference CKEditor5.dll")("./src/ui.js")},"ckeditor5/src/widget.js":(e,t,n)=>{e.exports=n("dll-reference CKEditor5.dll")("./src/widget.js")},"dll-reference CKEditor5.dll":e=>{"use strict";e.exports=CKEditor5.dll}},t={};function n(r){var s=t[r];if(void 0!==s)return s.exports;var o=t[r]={exports:{}};return e[r](o,o.exports,n),o.exports}n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t);var r={};return(()=>{"use strict";n.d(r,{default:()=>c});var e=n("ckeditor5/src/core.js"),t=n("ckeditor5/src/widget.js");class s extends e.Command{execute(){const{model:e}=this.editor;e.change((t=>{e.insertContent(function(e){let t=prompt("Enter transcription insert text");if(t){const n=e.createElement("transInsert"),r=e.createElement("transInsertSelect"),s=e.createElement("transInsertCaret");e.appendText("",{},r),e.appendText("^",{},s);const o=e.createElement("transInsertText");return e.appendText(t,{},o),e.append(r,n),e.append(s,n),e.append(o,n),n}return}(t))}))}refresh(){const{model:e}=this.editor,{selection:t}=e.document,n=e.schema.findAllowedParent(t.getFirstPosition(),"transInsert");this.isEnabled=null!==n}}class o extends e.Plugin{static get requires(){return[t.Widget]}init(){this._defineSchema(),this._defineConverters(),this.editor.commands.add("insertTransInsert",new s(this.editor))}_defineSchema(){const e=this.editor.model.schema;e.register("transInsert",{isObject:!0,allowWhere:"$text"}),e.register("transInsertSelect",{isLimit:!0,allowIn:"transInsert",allowContentOf:"$marker"}),e.register("transInsertCaret",{isLimit:!0,allowIn:"transInsert",allowContentOf:"$block"}),e.register("transInsertText",{isLimit:!0,allowIn:"transInsert",allowContentOf:"$block"}),e.addChildCheck(((e,t)=>{if(e.startsWith("trans")&&"transInsert"===t.name)return!1}))}_defineConverters(){const{conversion:e}=this.editor;e.for("upcast").elementToElement({model:"transInsert",view:{name:"trxnin"}}),e.for("upcast").elementToElement({model:"transInsertSelect",view:{name:"span",classes:["trxn-select","glyphicon","glyphicon-ok-sign"]}}),e.for("upcast").elementToElement({model:"transInsertCaret",view:{name:"span",classes:"trxn-caret"}}),e.for("upcast").elementToElement({model:"transInsertText",view:{name:"span",classes:"trxn-text"}}),e.for("dataDowncast").elementToElement({model:"transInsert",view:{name:"trxnin"}}),e.for("dataDowncast").elementToElement({model:"transInsertSelect",view:{name:"span",classes:["trxn-select","glyphicon","glyphicon-ok-sign"]}}),e.for("dataDowncast").elementToElement({model:"transInsertCaret",view:{name:"span",classes:"trxn-caret"}}),e.for("dataDowncast").elementToElement({model:"transInsertText",view:{name:"span",classes:"trxn-text"}}),e.for("editingDowncast").elementToElement({model:"transInsert",view:(e,{writer:n})=>{const r=n.createContainerElement("trxnin",{});return(0,t.toWidget)(r,n,{label:"Transcription insert widget"})}}),e.for("editingDowncast").elementToElement({model:"transInsertSelect",view:(e,{writer:n})=>{const r=n.createContainerElement("span",{class:"trxn-select glyphicon glyphicon-ok-sign"});return(0,t.toWidget)(r,n)}}),e.for("editingDowncast").elementToElement({model:"transInsertCaret",view:(e,{writer:n})=>{const r=n.createContainerElement("span",{class:"trxn-caret"});return(0,t.toWidget)(r,n)}}),e.for("editingDowncast").elementToElement({model:"transInsertText",view:(e,{writer:n})=>{const r=n.createEditableElement("span",{class:"trxn-text"});return(0,t.toWidgetEditable)(r,n)}})}}var i=n("ckeditor5/src/ui.js");class a extends e.Plugin{init(){const e=this.editor;e.ui.componentFactory.add("transInsert",(t=>{const n=e.commands.get("insertTransInsert"),r=new i.ButtonView(t);return r.set({label:e.t("Transcription Insert"),icon:'<?xml version="1.0" encoding="UTF-8" standalone="no"?>\n<svg\n   width="20"\n   height="20"\n   viewBox="0 0 20 20"\n   fill="none"\n   version="1.1"\n   id="svg4"\n   xmlns="http://www.w3.org/2000/svg"\n   xmlns:svg="http://www.w3.org/2000/svg">\n  <defs\n     id="defs8" />\n  <text\n     xml:space="preserve"\n     style="font-style:normal;font-weight:normal;font-size:9.74424px;line-height:0;font-family:sans-serif;fill:#ff0000;fill-opacity:1;stroke:none;stroke-width:0.1;stroke-miterlimit:4;stroke-dasharray:none"\n     x="3.1028173"\n     y="10.928698"\n     id="text3311"><tspan\n       style="font-style:normal;font-variant:normal;font-weight:bold;font-stretch:normal;font-size:13.3333px;line-height:0.95;font-family:Gayathri;-inkscape-font-specification:\'Gayathri Bold\';fill:#ff0000;stroke-width:0.1;stroke-miterlimit:4;stroke-dasharray:none"\n       id="tspan85653"\n       x="3.1028173"\n       y="10.928698">B</tspan><tspan\n       x="3.1028173"\n       y="17.749666"\n       style="font-style:normal;font-variant:normal;font-weight:bold;font-stretch:normal;line-height:0.45;font-family:Gayathri;-inkscape-font-specification:\'Gayathri Bold\';fill:#000000;stroke-width:0.1;stroke-miterlimit:4;stroke-dasharray:none"\n       id="tspan80751">  <tspan\n   style="font-size:13.3333px;stroke-width:0.1;stroke-miterlimit:4;stroke-dasharray:none"\n   id="tspan114927">A</tspan></tspan><tspan\n       x="3.1028173"\n       y="22.134573"\n       style="font-style:normal;font-variant:normal;font-weight:bold;font-stretch:normal;font-size:10.6667px;line-height:0.45;font-family:Gayathri;-inkscape-font-specification:\'Gayathri Bold\';letter-spacing:0px;fill:#ff0000;stroke:#ff0000;stroke-width:0.1;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1"\n       id="tspan80755">^</tspan></text>\n</svg>\n',tooltip:!0}),r.bind("isOn","isEnabled").to(n,"value","isEnabled"),this.listenTo(r,"execute",(()=>e.execute("insertTransInsert"))),r}))}}class l extends e.Plugin{static get requires(){return[o,a]}}const c={TransInsert:l}})(),r=r.default})()));