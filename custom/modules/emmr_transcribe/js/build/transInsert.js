!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e():"function"==typeof define&&define.amd?define([],e):"object"==typeof exports?exports.CKEditor5=e():(t.CKEditor5=t.CKEditor5||{},t.CKEditor5.transInsert=e())}(self,(()=>(()=>{var t={"ckeditor5/src/core.js":(t,e,n)=>{t.exports=n("dll-reference CKEditor5.dll")("./src/core.js")},"ckeditor5/src/ui.js":(t,e,n)=>{t.exports=n("dll-reference CKEditor5.dll")("./src/ui.js")},"ckeditor5/src/widget.js":(t,e,n)=>{t.exports=n("dll-reference CKEditor5.dll")("./src/widget.js")},"dll-reference CKEditor5.dll":t=>{"use strict";t.exports=CKEditor5.dll}},e={};function n(r){var s=e[r];if(void 0!==s)return s.exports;var o=e[r]={exports:{}};return t[r](o,o.exports,n),o.exports}n.d=(t,e)=>{for(var r in e)n.o(e,r)&&!n.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:e[r]})},n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e);var r={};return(()=>{"use strict";n.d(r,{default:()=>d});var t=n("ckeditor5/src/core.js"),e=n("ckeditor5/src/widget.js");class s extends t.Command{execute(){const{model:t}=this.editor;t.change((e=>{t.insertContent(function(t){let e=prompt("Enter transcription insert text");if(e){const n=t.createElement("transInsert"),r=t.createElement("transInsertCaret");t.appendText("^",{},r);const s=t.createElement("transInsertText");return t.appendText(e,{},s),t.append(r,n),t.append(s,n),n}return}(e))}))}refresh(){const{model:t}=this.editor,{selection:e}=t.document,n=t.schema.findAllowedParent(e.getFirstPosition(),"transInsert");this.isEnabled=null!==n}}class o extends t.Plugin{static get requires(){return[e.Widget]}init(){this._defineSchema(),this._defineConverters(),this.editor.commands.add("insertTransInsert",new s(this.editor))}_defineSchema(){const t=this.editor.model.schema;t.register("transInsert",{isObject:!0,allowWhere:"$text"}),t.register("transInsertCaret",{isLimit:!0,allowIn:"transInsert",allowContentOf:"$block"}),t.register("transInsertText",{isLimit:!0,allowIn:"transInsert",allowContentOf:"$block"}),t.addChildCheck(((t,e)=>{if(t.startsWith("trans")&&"transInsert"===e.name)return!1}))}_defineConverters(){const{conversion:t}=this.editor;t.for("upcast").elementToElement({model:"transInsert",view:{name:"trxnin"}}),t.for("upcast").elementToElement({model:"transInsertCaret",view:{name:"span",classes:"trxn-caret"}}),t.for("upcast").elementToElement({model:"transInsertText",view:{name:"span",classes:"trxn-text"}}),t.for("dataDowncast").elementToElement({model:"transInsert",view:{name:"trxnin"}}),t.for("dataDowncast").elementToElement({model:"transInsertCaret",view:{name:"span",classes:"trxn-caret"}}),t.for("dataDowncast").elementToElement({model:"transInsertText",view:{name:"span",classes:"trxn-text"}}),t.for("editingDowncast").elementToElement({model:"transInsert",view:(t,{writer:n})=>{const r=n.createContainerElement("trxnin",{});return(0,e.toWidget)(r,n,{label:"Transcription insert widget"})}}),t.for("editingDowncast").elementToElement({model:"transInsertCaret",view:(t,{writer:n})=>{const r=n.createContainerElement("span",{class:"trxn-caret"});return(0,e.toWidget)(r,n)}}),t.for("editingDowncast").elementToElement({model:"transInsertText",view:(t,{writer:n})=>{const r=n.createEditableElement("span",{class:"trxn-text"});return(0,e.toWidgetEditable)(r,n)}})}}var i=n("ckeditor5/src/ui.js");class a extends t.Plugin{init(){const t=this.editor;t.ui.componentFactory.add("transInsert",(e=>{const n=t.commands.get("insertTransInsert"),r=new i.ButtonView(e);return r.set({label:t.t("Transcription Insert"),icon:'<?xml version="1.0" encoding="UTF-8" standalone="no"?>\n<svg\n   width="20"\n   height="20"\n   viewBox="0 0 20 20"\n   fill="none"\n   version="1.1"\n   id="svg4"\n   xmlns="http://www.w3.org/2000/svg"\n   xmlns:svg="http://www.w3.org/2000/svg">\n  <defs\n     id="defs8" />\n  <text\n     xml:space="preserve"\n     style="font-style:normal;font-weight:normal;font-size:9.74424px;line-height:0;font-family:sans-serif;fill:#ff0000;fill-opacity:1;stroke:none;stroke-width:0.1;stroke-miterlimit:4;stroke-dasharray:none"\n     x="3.1028173"\n     y="10.928698"\n     id="text3311"><tspan\n       style="font-style:normal;font-variant:normal;font-weight:bold;font-stretch:normal;font-size:13.3333px;line-height:0.95;font-family:Gayathri;-inkscape-font-specification:\'Gayathri Bold\';fill:#ff0000;stroke-width:0.1;stroke-miterlimit:4;stroke-dasharray:none"\n       id="tspan85653"\n       x="3.1028173"\n       y="10.928698">B</tspan><tspan\n       x="3.1028173"\n       y="17.749666"\n       style="font-style:normal;font-variant:normal;font-weight:bold;font-stretch:normal;line-height:0.45;font-family:Gayathri;-inkscape-font-specification:\'Gayathri Bold\';fill:#000000;stroke-width:0.1;stroke-miterlimit:4;stroke-dasharray:none"\n       id="tspan80751">  <tspan\n   style="font-size:13.3333px;stroke-width:0.1;stroke-miterlimit:4;stroke-dasharray:none"\n   id="tspan114927">A</tspan></tspan><tspan\n       x="3.1028173"\n       y="22.134573"\n       style="font-style:normal;font-variant:normal;font-weight:bold;font-stretch:normal;font-size:10.6667px;line-height:0.45;font-family:Gayathri;-inkscape-font-specification:\'Gayathri Bold\';letter-spacing:0px;fill:#ff0000;stroke:#ff0000;stroke-width:0.1;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1"\n       id="tspan80755">^</tspan></text>\n</svg>\n',tooltip:!0}),r.bind("isOn","isEnabled").to(n,"value","isEnabled"),this.listenTo(r,"execute",(()=>t.execute("insertTransInsert"))),r}))}}class l extends t.Plugin{static get requires(){return[o,a]}}const d={TransInsert:l}})(),r=r.default})()));