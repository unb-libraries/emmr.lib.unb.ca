<?php

/**
 * @file
 * Contains emmr_core.module.
 */

 use Drupal\block\Entity\Block;

/**
 * Implements hook_preprocess_hook().
 */
function emmr_core_preprocess_emmr_intro(&$variables) {
  $block = Block::load('exposedformemmr_browse_recipespage_2');
  $variables['search_block_output'] = \Drupal::entityTypeManager()
    ->getViewBuilder('block')
    ->view($block);
}

/**
 * Implements hook_theme().
 */
function emmr_core_theme($existing, $type, $theme, $path) {
  return [
    'emmr_intro' => [
      'variables' => [],
    ],
    'node__emmr_recipe__full' => [
      'arguments' => [
        'view' => NULL,
        'field' => NULL,
        'row' => NULL,
        'output' => NULL,
      ],
      'template' => 'node--emmr-recipe--full',
      'path' => drupal_get_path('module', 'emmr_core') . '/templates',
      'base hook' => 'node__emmr_recipe__full',
    ],
    'node__emmr_recipe__pdf' => [
      'arguments' => [
        'view' => NULL,
        'field' => NULL,
        'row' => NULL,
        'output' => NULL,
      ],
      'template' => 'node--emmr-recipe--pdf',
      'path' => drupal_get_path('module', 'emmr_core') . '/templates',
      'base hook' => 'node__emmr_recipe__pdf',
    ],
    'node__emmr_source__full' => [
      'arguments' => [
        'view' => NULL,
        'field' => NULL,
        'row' => NULL,
        'output' => NULL,
      ],
      'template' => 'node--emmr-source--full',
      'path' => drupal_get_path('module', 'emmr_core') . '/templates',
      'base hook' => 'node__emmr_source__full',
    ],
  ];
}

/**
 * Implements hook_ENTITY_TYPE_presave().
 */
function emmr_core_node_presave($node) {
  // Generate mid date on recipe save.
  if ($node->bundle() == "emmr_recipe") {

    $imprecise = $node->get('field_imprecise_date')->getValue()[0]['value'];
    $date = $node->get('field_recipe_date')->getValue();

    if (!$imprecise) {
      $node->get('field_recipe_date_text')->setValue("");
      $node->get('field_recipe_date_to')->setValue("");
    }

    if ($node->get('field_annotations')->getValue()) {
      $anno = $node->get('field_annotations')
        ->getValue()[0]['subform']['field_annotation_body'][0]['value'];

      if ($anno == "") {
        $node->get('field_annotations')->setValue(NULL);
      }
    }

    if ($node->get('field_contributors')->getValue()) {
      $contrib = $node->get('field_contributors')
        ->getValue()[0]['subform']['field_contributor_name'][0]['value'];

      if ($contrib == "") {
        $node->get('field_contributors')->setValue(NULL);
      }
    }

    // Process annotations.
    // Recover transcription.
    $trans = $node->get('field_recipe_transcription')->getValue()[0]['value'];

    // Remove all annotations.
    $matches = [];
    preg_match_all('/<span class="emmr-anno">([^<]+)<\/span>/', $trans,
      $matches);
    $match_count = count($matches[0]);

    if ($match_count != 0) {
      for ($i = 0; $i < $match_count; $i++) {
        $trans = str_replace($matches[0][$i], $matches[1][$i], $trans);
      }
    }

    // Update annotations.
    $annos = $node->get('field_annotations')->getValue();
    $annos_val = [];

    foreach ($annos as $anno) {
      $annos_val[] = $anno['subform']['field_annotation_text'][0]['value'];
    }

    foreach ($annos_val as $val) {
      $len = strlen($val);
      $pos = strpos(strtoupper($trans), strtoupper($val));

      if ($pos !== FALSE) {
        $pre = substr($trans, 0, $pos);
        $mid = substr($trans, $pos, $len);
        $end = substr($trans, $pos + $len);
        $pre_tail = substr($pre, -24);

        if ($pre_tail != '<span class="emmr-anno">') {
          $trans = $pre . '<span class="emmr-anno">' . $mid . '</span>' . $end;
        }
      }
    }

    $trans_full = ['format' => "basic_html", 'value' => $trans];
    $node->set('field_recipe_transcription', $trans_full);
  }
}

/**
 * Implements hook_FORM_ID_alter().
 */
function emmr_core_form_alter(&$form, &$form_state, $form_id) {

  if ($form_id == "node_emmr_recipe_form" ||
  $form_id == "node_emmr_recipe_edit_form") {

    $form['#validate'][] = 'validate_date_text';

    $form['field_recipe_date_to']['#states']['invisible'][':input[name="field_imprecise_date[value]"]']
      = ['checked' => FALSE];
    $form['field_recipe_date_text']['#states']['invisible'][':input[name="field_imprecise_date[value]"]']
      = ['checked' => FALSE];
  }
}

/**
 * Callback validation function for recipe-edit.
 */
function validate_date_text(&$form, $form_state) {
  $imp_date = $form_state->getValue('field_imprecise_date')['value'];
  $date_txt = $form_state->getValue('field_recipe_date_text')[0]['value'];

  if ($imp_date && $date_txt == "") {
    $form_state->setErrorByName('field_recipe_date_text',
      t('Imprecise dates must contain a date description.'));
  }
}

/**
 * Implements hook_views_query_alter().
 */
function emmr_core_views_query_alter($view, $query) {
  $view = $query->view;
  $view_id = $view->id();
  $view_disp = $view->current_display;

  if ($view_id == "emmr_browse_recipes" && $view_disp == "page_1") {
    $date_where = $query->where['2']['conditions'];
    $date_min = date('c',
      strtotime($query->view->exposed_data['field_recipe_date_value']['min']));

    if (count($date_where)) {
      $where2 = str_replace('date', 'date_to',
        $date_where[0]);
      $query->where['2']['conditions'][] = $where2;

      $where3 = $date_where[0];
      $where3['field'] =
        "DATE_FORMAT('" . $date_min . "', '%Y-%m-%d')
        BETWEEN
        DATE_FORMAT(node__field_recipe_date.field_recipe_date_value, '%Y-%m-%d')
        AND DATE_FORMAT(node__field_recipe_date_to.field_recipe_date_to_value, '%Y-%m-%d')";

      $query->where['2']['conditions'][] = $where3;
    }
  }
}
